<?php

/**
 * @Author: khsing
 * @Date:   2017-07-21 10:54:16
 * @Last Modified by:   khsing
 * @Last Modified time: 2017-07-21 11:29:13
 */

namespace Khsing\Restapi\OAuth2\Bridge;

use Laravel\Passport\Bridge\Client;
use Laravel\Passport\Bridge\ClientRepository as Repository;
use Hashids\Hashids;

 /**
 * Custome ClientRepository
 */
class ClientRepository extends Repository
{


    /**
     * {@inheritdoc}
     */
    public function getClientEntity(
        $clientIdentifier,
        $grantType,
        $clientSecret = null,
        $mustValidateSecret = true
    ) {
        $clientIdentifier = decodeClientIdentifier($clientIdentifier);
        // First, we will verify that the client exists and is authorized to create personal
        // access tokens. Generally personal access tokens are only generated by the user
        // from the main interface. We'll only let certain clients generate the tokens.
        $record = $this->clients->findActive($clientIdentifier);

        if (! $record || ! $this->handlesGrant($record, $grantType)) {
            return;
        }

        // Once we have an existing client record we will create this actual client instance
        // and verify the secret if necessary. If the secret is valid we will be ready to
        // return this client instance back out to the consuming methods and finish up.
        $client = new Client(
            $clientIdentifier, $record->name, $record->redirect
        );

        if ($mustValidateSecret &&
            ! hash_equals($record->secret, (string) $clientSecret)) {
            return;
        }

        return $client;
    }
}
